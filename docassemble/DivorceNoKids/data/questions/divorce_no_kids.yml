---
include:
  - docassemble.AssemblyLine:assembly_line.yml
  - docassemble.ALAnyState:any_state.yml
  - docassemble.ALToolbox:phone-number-validation.yml
---
metadata:
  title: >-
    Divorce (no kids)
  short title: >-
    Divorce (no kids)
  description: |-
    This interview helps someone in Vermont ask the court for a Divorce (no kids).
  tags:
    - "FA-00-00-00-00"
  authors:
    - Mia Bonardi
  original_form:
    - https://www.vermontjudiciary.org/sites/default/files/documents/400-00836NoKids_1.pdf
  allowed_courts: []
  typical_role: "plaintiff"
  al_weaver_version: "1.10.1"
  generated_on: "2023-07-25"
---
features:
  css: style.css
---
objects:
  - al_logo: DAStaticFile.using(filename="LSV_bug.png")
---
images:
  big_logo: LSV_logo.png 
---
objects:
  - all_courts: ALCourtLoader.using(file_name='courts_list.xlsx')
---
code: |
  trial_court = all_courts.as_court('trial_court', trial_court_index)
  trial_court.geolocate()  
---
reconsider: True
code: |
  al_menu_items_tmp = [
    {"url": url_ask(['al_start_over_confirmation','al_start_over']),
    "label": "Start over"
    },
    {
      "url": url_ask(['al_exit_logout_confirmation', 'al_exit_logout']),
      "label": "Exit and delete my answers"
    },
  ]
  if al_enable_incomplete_downloads:
    al_menu_items_tmp.append({
        "url": url_action('al_error_action_download_screen'), 
        "label": "Download current progress"
    })
  
  # Answer set feature is behind a server-wide configuration option
  if get_config('assembly line',{}).get('enable answer sets'):
    al_menu_items_tmp.extend([
    {"url": url_ask(["al_sessions_snapshot_label", {"recompute": ["al_sessions_save_session_snapshot"]}, "al_sessions_save_status"]),
    "label": "Save answer set"
    },
    action_menu_item("Load answer set", "al_load_saved_session"),
  ]
  )
  
  if get_config('assembly line',{}).get('enable answer set imports'):
    al_menu_items_tmp.append(
      {"url": url_ask(["al_sessions_json_file", {"recompute": ["al_sessions_import_json"]}, "al_sessions_load_status"]),
      "label": "Import answer set"
      }
    )
  al_menu_items_tmp.append(
    {
      "url": url_action('edit_answers_screen'),
      "label": "Edit your answers"
      
    }
  )
    
  al_menu_items = al_menu_items_tmp
  del al_menu_items_tmp
---
id: choose a court
question: |
  Choose a Family Court
subquestion: |
  Choose the county where you will file your forms. 
      
  Not sure what county? [Check this list of cities and towns to find the county.](https://en.m.wikipedia.org/wiki/List_of_municipalities_in_Vermont#Cities)
fields:
  - County: trial_court_index      
    code: all_courts._load_courts()['address_county'].items()
---
code: |
  # This controls the default country and list of states in address field questions
  AL_DEFAULT_COUNTRY = "US"
---
code: |
  # This controls the default state in address field questions
  AL_DEFAULT_STATE = "VT"
---
code: |
  github_repo_name =  'docassemble-DivorceNoKids'
---
code: |
  interview_short_title = "Ask the court for a Divorce (no kids)"
---
code: |
  al_form_type = "starts_case" 
---
objects:
  - children: ALPeopleList.using(ask_number=True, complete_attribute="complete")
  - users: ALPeopleList.using(ask_number=True,target_number=1)
  - other_parties: ALPeopleList.using(ask_number=True,target_number=1)
  - earlier_actions: DAList.using(object_type=Thing, ask_number=True, complete_attribute='complete')
  - earlier_RFA: DAList.using(object_type=Thing, ask_number=True, complete_attribute='complete1')
---
sections:
  - review_divorce_no_kids: Review your answers
---
#################### Interview order #####################
comment: |
  Controls order and branching logic for questions specific to this form
id: interview_order_divorce_no_kids
code: |
  # Set the allowed courts for this interview
  allowed_courts = []
  nav.set_section("review_divorce_no_kids")
  user_role = "plaintiff"
  user_ask_role = "plaintiff"
  
  if (not plaintiff_VT and not defendant_VT) or (not defendant_VT and not plaintiff_VT):
  
    if not marriage_or_civil_union_VT and not both_cant_divorce_current_state and not have_property_agreement:
    
        jurisdiction_kickout
        
  users.gather()
  set_parts(subtitle=str(users))
  users[0].birthdate
  users[0].address.address
  users[0].email
  user_has_attorney

  set_progress(16)
  
  other_parties.gather()
  other_parties[0].birthdate
  other_parties[0].address.address
  defendant_contact_unknown
  other_parties_has_attorney
  
  set_progress(32)
        
  if have_school_age_children: 
    children.gather()
    children[0].address.address 
    child_custody
    parental_rights
  else: 
    children.target_number = 0
  
  license_type
  
  grant_for
  
  set_progress(48)
  
  filing_financial_form
  
  if earlier_actions_yes: 
    earlier_actions.gather()
  else: 
    earlier_actions.target_number = 0
    
  if earlier_RFA_yes:
    earlier_RFA.gather()
  else: 
    earlier_RFA.target_number = 0
    
  set_progress(64)
  
  plaintiff_des_assistance
  plaintiff_military_service
  
  docket_number
  
  trial_court
  
  interview_order_divorce_no_kids = True
---
sets:
  - other_parties[i].name.first
  - other_parties[i].name.last
  - other_parties[i].name.middle
  - other_parties[i].name.suffix
id: names of opposing parties
question: |
  Name of the **defendant** in this matter
fields:
  - code: |
      other_parties[i].name_fields(person_or_business='person')
---
id: jurisdiction kickout
question: |
  Stop
subquestion: |
  <i class="fas fa-hand-paper fa-3x" aria-hidden="true"></i>  **Stop.** In this situation, these are **not** the right forms to fill out. **Do not use this interview.** 
continue button field: jurisdiction_kickout
buttons:
  - Exit: exit
    url: https://vtlawhelp.org
---
###################### Main order ######################
comment: |
  This block includes the logic for standalone interviews.
  Delete mandatory: True to include in another interview
mandatory: True
code: |
  al_intro_screen
  interview_order_divorce_no_kids
  signature_date
  # Store anonymous data for analytics / statistics
  store_variables_snapshot(
      persistent=True,
      data={
          "zip": showifdef("users[0].address.zip"),
          "reached_interview_end": True,
      },
  )
  divorce_no_kids_preview_question
  basic_questions_signature_flow    
  
  divorce_no_kids_download
---
id: basic questions intro screen
decoration: form-lineal
question: |
  **${interview_short_title} in Vermont**
subquestion: |  
  <div class="border-around-text">
  <p>Welcome to ${ AL_ORGANIZATION_TITLE}.</p>
  
  <p>${ AL_ORGANIZATION_TITLE } can help you complete and download forms in 3 steps:</p>
  <ul><li><b>Step 1:</b> Answer questions that will fill in court forms for you.</li>
  <li><b>Step 2:</b> Preview the completed forms.</li>
  <li><b>Step 3:</b> Download, save or print the final forms. You will need to mail, email, efile or deliver them to the court on your own.</li></ul>
  </div>  

  VTCourtForms interviews were created by Legal Services Vermont with support from the Legal Services Corporation. It is free to use this program. This site is not a lawyer. Visit our [VTLawHelp.org website](https://vtlawhelp.org/roadmap/relief-from-abuse/step-1) for more information about Relief from Abuse orders.
  
  [FILE big_logo, 30%, Legal Services Vermont logo]

fields:
  - To continue, please accept our [terms of use](https://vtlawhelp.org/vlh-privacy).: acknowledged_information_use
    datatype: checkboxes
    none of the above: False    
    minlength: 1
    choices:
      - I accept the terms of use.
    validation messages:
      minlength: |
        You cannot continue unless you agree to the terms of use.        
continue button field: al_intro_screen
---
code: |
  earlier_actions[i].action_type
  earlier_actions[i].complete = True
---
code: |
  earlier_RFA[i].action_type
  earlier_RFA[i].complete1 = True
---
id: marriage or civil union
question: |
  Do you and ${ other_parties } have a marriage or civil union?
fields:
  - no label: license_type
    input type: radio
    choices: 
      - Marriage: marriage
      - Civil Union: civil_union
  - Marriage City: marriage_city
    show if: 
      variable: license_type
      is: marriage
  - Marriage State: marriage_state
    code: |
      states_list()
    default: VT
    show if: 
      variable: license_type
      is: marriage
  - Marriage Date: marriage_date
    datatype: date
    show if: 
      variable: license_type
      is: marriage
  - Civil Union City: civil_union_city
    show if: 
      variable: license_type
      is: civil_union
  - Civil Union State: civil_union_state
    code: |
      states_list()
    default: VT
    show if: 
      variable: license_type
      is: civil_union
  - Civil Union Date: civil_union_date
    datatype: date
    show if: 
      variable: license_type
      is: civil_union
---
id: plaintiff VT 6 months
question: |
  Have you lived in Vermont since ${ today().minus(months=6) }?
fields:
  - no label: plaintiff_VT
    datatype: yesnoradio
  - Date you moved to VT: date_plaintiff_moved_to_VT
    datatype: date
    show if: plaintiff_VT
---
id: defendant VT 6 months
question: |
  Has the defendant lived in Vermont since ${ today().minus(months=6) }?
fields:
  - no label: defendant_VT
    datatype: yesnoradio
  - Date the defendant moved to VT: date_defendant_moved_to_VT
    datatype: date  
    show if: defendant_VT
---
id: marriage_or_civil_union_VT
question: |
  Did you and your spouse get a marriage or civil union in VT?
fields:
  - no label: marriage_or_civil_union_VT
    datatype: yesnoradio
---
id: both_cant_divorce_current_state
question: |
  Do you and your spouse currently live in states where you can't get a divorce or dissolve your civil union?
fields:
  - no label: both_cant_divorce_current_state
    datatype: yesnoradio
---
id: have school age children
question: |
  Do you and ${other_parties} have school aged children?
fields:
  - no label: have_school_age_children
    datatype: yesnoradio
  - How many: children.target_number
    datatype: integer
    show if: have_school_age_children
---  
code: |
  children[i].name.first
  children[i].birthdate
  children[i].address.address
  children[i].date
  children[i].housemate
  children[i].complete = True 
---
id: minor children
sets:
  - children[0].name.first
  - children[0].name.last
  - children[0].name.middle
  - children[0].name.suffix
question: |
  % if hasattr(children, 'ask_number') and children.ask_number and children.target_number == 1:
  Child's name
  % else:
  Name of first child
  % endif
fields:
  - code: |
      children[0].name_fields()
---
id: minor children dob
question: |
  What is ${children[i].name} date of birth?
fields:
  - Birthdate: children[i].birthdate
    datatype: Birthdate
---
id: children information
question: |
  Where has ${children[i]} lived in the past 5 years, and who did ${children[i]} live with
fields:
  - Address: children[i].address.address
    address autocomplete: True
  - Unit: children[i].address.unit
    required: False
  - City: children[i].address.city
    address autocomplete: True
  - State: children[i].address.state
    address autocomplete: True
  - Dates: children[i].date
  - Name of people that lived with your children: children[i].housemate
---
id: child custody
question: |
  Please check the box below if the statement next to it is true. For each box you check, please explain your answer on another page.
fields: 
  no label: child_custody
  datatype: checkboxes
  none of the above: False
  choices: 
    - I have participated as a party, witness, or in some other way in a court case about the custody of this child or these children in Vermont or another state.: participation
    - I have information about a case concerning this child or these children that is now pending in a Vermont court or a court in another state.: information
    - I have knowledge about a person who is not a party to this case who has physical custody of this child or these children or who claims to have custody of or visitation rights to this child or these children.: knowledge


---
id: property agreement
question: |
  Do you and your spouse already have an agreement about how to deal with your property and debts?
fields:
  - no label: have_property_agreement
    datatype: yesnoradio
--- 
id: earlier actions
question: |
  Have you or the defendant filed for **divorce, legal separation, dissolution, or annulment** before filing this petition? 
fields:
  - no label: earlier_actions_yes
    datatype: yesnoradio
  - How many?: earlier_actions.target_number
    datatype: integer
    show if: earlier_actions_yes
---
id: earlier RFA actions
question: |
  Have either you or the defendant filed a **complaint for relief from abuse or a request for a protective order** against each other?
fields:
  - no label: earlier_RFA_yes
    datatype: yesnoradio
  - How many?: earlier_RFA.target_number
    datatype: integer
    show if: earlier_RFA_yes
---
id: collect earlier RFA actions
generic object: DAList
question: |
  Tell us about the **${ ordinal(i) }** action.
subquestion: |
  Attach a copy of any Court Order issued.
fields:
  - Type of action: earlier_actions[i].action_type
    datatype: radio
    choices: 
      - Divorce
      - Legal separation
      - Dissolution
      - Annulment
  - Who filed: earlier_actions[i].who_filed
    datatype: object_radio
    choices:
      - users
      - other_parties
  - Where filed: earlier_actions[i].where_filed
  - Year filed: earlier_actions[i].year_filed
---
id: collect earlier RFA actions
generic object: DAList
question: |
  Tell us about the **${ ordinal(i) }** action.
subquestion: |
  Attach a copy of any Court Order issued.
fields:
  - Type of action: earlier_RFA[i].action_type
    datatype: radio
    choices: 
      - Relief from abuse 
      - Protective order
  - Who filed: earlier_RFA[i].who_filed
    datatype: object_radio
    choices:
      - users
      - other_parties
  - Where filed: earlier_RFA[i].where_filed
  - Year filed: earlier_RFA[i].year_filed
---
generic object: DAList
question: |
  Is there another action?
yesno: x[i].there_is_another
---
id: Gather users street or mailing address
sets:
  - users[0].address.address
  - users[0].address.city
question: |
  What is your address?
fields:
  - Address: users[0].address.address
    address autocomplete: True
  - Unit: users[0].address.unit
    required: False
  - City: users[0].address.city
  - State: users[0].address.state
    code: |
      states_list()
    default: VT
  - Zip or postal code: users[0].address.zip
    required: False
  - County: users[0].address.county
  - Do you have a mailing address that is different from your street address?: users_mailing_address_different
    datatype: yesnoradio
  - Mailing address: users[0].mailing_address.address
    address autocomplete: True
    show if: users_mailing_address_different
  - Unit: users[0].mailing_address.unit
    required: False
    show if: users_mailing_address_different
  - City: users[0].mailing_address.city
    show if: users_mailing_address_different
  - State: users[0].mailing_address.state
    code: |
      states_list()
    default: VT
    show if: users_mailing_address_different
  - Zip or postal code: users[0].mailing_address.zip
    required: False
    show if: users_mailing_address_different
---
id: Gather users contact information
question: |
  What is your contact information?
subquestion: |
  Include at least **one way** to reach you. 
fields:  
  - Daytime phone number: users[0].daytime_phone_number
    datatype: al_international_phone
    required: False
  - Evening phone number: users[0].evening_phone_number
    datatype: al_international_phone
    required: False
  - Email: users[0].email    
    datatype: email
    required: False      
validation code: |
  if (not showifdef('users[0].daytime_phone_number') and \
      (not showifdef('users[0].email')) and \
      (not showifdef('users[0].evening_phone_number'))):
    validation_error(word("You need to provide at least one contact method."))
---
id: Users attorney info
question: |
  Do you have an attorney?
fields:
  - no label: user_has_attorney
    datatype: yesnoradio
  - Attorney name: users1_attorneys_name
    show if: user_has_attorney
  - Attorney phone number: users1_attorneys_phone_numer
    datatype: al_international_phone
    show if: user_has_attorney
---
id: Users resided in VT length
question: |
  Have you resided in Vermont for 6 full months?
fields:
  - no label: user_resided_VT_6_months
    datatype: yesnoradio
---
id: des assistance
question: |
   Do you or ${ other_parties } receive assistance from the Division of Economic Services (DES) 
subquestion: |
  Examples include: Food Stamps and Reach Up.
fields: 
  - I recieve DES assisance: plaintiff_des_assistance
    datatype: yesno
  - ${ other_parties } recieves DES assisance: defendant_des_assistance
    datatype: yesno
---
id: military service
question: |
   Have you or ${ other_parties } served in the military?
fields: 
  - I served in the military: plaintiff_military_service
    datatype: yesno
  - ${ other_parties } served in the military: defendant_military_service
    datatype: yesno
---
id: other parties attorney info
question: |
  Does ${ other_parties[0] } have an attorney?
fields:
  - no label: other_parties_has_attorney
    datatype: yesnomaybe
  - note: |
      **Include ${ other_parties[0] }'s attorney's information if you know it.**
    show if: other_parties_has_attorney
  - Attorney's name: other_parties1_attorneys_name
    show if: other_parties_has_attorney
    required: False
  - Attorney phone number: other_parties1_attorneys_phone_number
    datatype: al_international_phone
    show if: other_parties_has_attorney
    required: False
---
id: Gather other parties contact information
question: |
  What is ${ other_parties[0] }'s contact information?
fields:
  - I don't know ${ other_parties[0] }'s contact information: defendant_contact_unknown
    datatype: yesno
    disable others: True
  - Daytime phone number: other_parties[0].daytime_phone_number
    datatype: al_international_phone
    required: False
  - Evening phone number: other_parties[0].evening_phone_number
    datatype: al_international_phone
    required: False
  - Email: other_parties[0].email    
    datatype: email
    required: False    
validation code: |
  if (not showifdef('other_parties[0].daytime_phone_number') and \
      (not showifdef('other_parties[0].email')) and \
      (not showifdef('other_parties[0].evening_phone_number')) and \
      (not showifdef('defendant_contact_unknown'))):
    validation_error(word("You must make a selection or provide at least one contact method."))
---
id: Gather other parties street or mailing address
sets:
  - other_parties[0].address.address
  - other_parties[0].address.city
question: |
  What is ${ other_parties[0] }'s address?
fields:
  - Address: other_parties[0].address.address
    address autocomplete: True
  - Unit: other_parties[0].address.unit
    required: False
  - City: other_parties[0].address.city
  - State: other_parties[0].address.state
    code: |
      states_list()
    default: VT
  - Zip or postal code: other_parties[0].address.zip
    required: False
  - County: other_parties[0].address.county
  - Does ${ other_parties } have a mailing address that is different from their street address?: other_parties_mailing_address_different
    datatype: yesnoradio
  - Mailing address: other_parties[0].mailing_address.address
    address autocomplete: True
    show if: other_parties_mailing_address_different
  - Unit: other_parties[0].mailing_address.unit
    required: False
    show if: other_parties_mailing_address_different
  - City: other_parties[0].mailing_address.city
    show if: other_parties_mailing_address_different
  - State: other_parties[0].mailing_address.state
    code: |
      states_list()
    default: VT
    show if: other_parties_mailing_address_different
  - Zip or postal code: other_parties[0].mailing_address.zip
    required: False
    show if: other_parties_mailing_address_different
---
id: Why are you seeking x from the court
question: |
  What are your grounds for divorce?
fields:
  - "Six month separation": six_month_separation
    datatype: yesno
  - "Date of separation": separation_date
    datatype: date
  - "Other ground divorce": other_ground_divorce
    datatype: yesno
  - "Other ground divorce explanation": other_ground_divorce_explanation
    maxlength: 55
---
id: filing_financial_form
question: |
  Are you also filing a completed financial form 400-00813B now?
subquestion: |
  On that form you will list all of the property, assets, and debts that you and ${ other_parties[0] } own together or separately that are known to you. You can file it now with the Complaint form, or file it at a later date.
fields:
  - "Are you filing form 400-00813B now?": filing_financial_form
    datatype: yesnoradio
---
id: asking the court for 
question: |
  What are you asking the court for?
fields:
  - Asking for: grant_for
    input type: radio
    choices: 
      - Divorce: divorce
      - Legal Separation: legal_separation
      - Dissolution: dissolution
  - On what grounds?: grounds
    datatype: checkboxes
    choices: 
      - Six month separation: six_month_separation
      - Other ground divorce: other_ground
    none of the above: False
  - Date of separation: separation_date
    datatype: date
    show if: grounds["six_month_separation"]
  - Other ground divorce explanation: other_ground_explanation
    show if: grounds["other_ground"]
  - note: Other things you are asking the court for
  - Property maintenance: property_maintenance
    datatype: yesno
  - Spousal maintenancee: spousal_maintenancee
    datatype: yesno
  - Court costs: court_costs
    datatype: yesno
  - Attorney fees: attorney_fees
    datatype: yesno
  - Name change: name_change
    datatype: yesno
  - Plaintiff former name: plaintiff_former_name
    show if: name_change
  - Issue an order with a written agreement between you and ${ other_parties }: written_agreement_attached
    datatype: yesno
  - note: You must attach the written agreement. To qualify for the reduced filing fee, the attached agreement must cover all the issues that you seek to have the Court resolve.
    show if: written_agreement_attached
  
---
id: asking the court for (with children)
question: |  
  I ask that the court grant me
fields:
  - Parental rights and responsibilities: parental_rights
    datatype: yesno
    required: False
  - Legal parental rights and responsibilities: legal_rights_responsibilities
    datatype: yesno
    required: False
    show if: parental_rights
  - Shared jointly: legal_shared_jointly
    datatype: yesno
    required: False
    show if: legal_rights_responsibilities
  - Given solely: legal_given_solely
    required: False
    show if: legal_rights_responsibilities
    datatype: yesno  
  - To myself: legal_myself
    datatype: yesno
    show if: legal_given_solely
    required: False
  - To the defendant: legal_defendant
    datatype: yesno
    show if: legal_given_solely
    required: False
  - Physical parental rights and responsibilities: physical_rights_responsibilities
    datatype: yesno
    required: False
    show if: parental_rights
  - Shared jointly: physical_shared_jointly
    required: False
    datatype: yesno
    show if: physical_rights_responsibilities
  - Given solely: physical_given_solely
    required: False
    show if: physical_rights_responsibilities
    datatype: yesno
  - To myself: physical_myself
    required: False
    datatype: yesno
    show if: physical_given_solely
  - To the defendant: physical_defendant
    required: False
    datatype: yesno
    show if: physical_given_solely
    
  - Parent Child Contact for: contact_for
    datatype: yesno
  - Contact for myself: contact_for_myself
    datatype: yesno
    show if: contact_for
    required: False
  - Contact for the defendant: contact_for_defendant
    datatype: yesno
    show if: contact_for
    required: False
  - Child support, medical support and/or maintenance supplement.: child_medical_support
    datatype: yesno
---
id: preview divorce_no_kids
question: |
  Preview your form before you sign it
subquestion: |
  Here is a preview of the form you will sign on the next page.   
  
  ${ al_court_bundle.as_pdf(key='preview') }

  Click the image to open it in a new tab. Click the "Edit answers" button
  to edit your answers.

  ${ action_button_html(url_action('review_divorce_no_kids'), label='Edit answers', color='info') }
  
  Remember to come back to this window to continue and sign your form.
continue button field: divorce_no_kids_preview_question    
---
code: |
  signature_fields = ['users[0].signature']
---
code: |
  # This is a placeholder for the addresses that will be searched
  # for matching address to court. Edit if court venue is based on 
  # a different address than the user's
  [user.address.address for user in users.complete_elements()]
  addresses_to_search = [user.address for user in users.complete_elements()]
---
id: divorce no kids review screen
event: review_divorce_no_kids
question: |
  Review your answers
review:
  - Edit: docket_number
    button: |
      % if defined("docket_number"):
      **Docket number**:
      ${ docket_number }
      % endif
  - Edit: trial_court
    button: |
      % if defined("trial_court"):
      **Court county**: 
      ${ trial_court.address.county }
      % endif
  - Edit: users.revisit
    button: |
      **Users**

      % for item in users:
        * ${ item }
      % endfor
  - Edit: other_parties.revisit
    button: |
      **Other parties**

      % for item in other_parties:
        * ${ item }
      % endfor
  - Edit: children.revisit
    button: |
      **Children**
      
      % for item in children:
        * ${ item } 
      % endfor
  - Edit: earlier_actions.revisit
    button: |
      **Earlier Actions**

      % for item in earlier_actions:
        * ${ item }
      % endfor
  - Edit: earlier_RFA.revisit
    button: |
      **Earlier RFAs**

      % for item in earlier_RFA:
        * ${ item }
      % endfor
  - Edit: divorce
    button: |
      **Divorce**:
      ${ word(yesno(divorce)) }
  - Edit: civil_union_dissolution
    button: |
      **Civil union dissolution**:
      ${ word(yesno(civil_union_dissolution)) }
  - Edit: legal_separation
    button: |
      **Legal separation**:
      ${ word(yesno(legal_separation)) }
  - Edit: plaintiff_VT
    button: |
      **Plaintiff vt**:
      ${ word(yesno(plaintiff_VT)) }
  - Edit: date_plaintiff_moved_to_VT
    button: |
      **Date plaintiff moved to vt**:
      ${ date_plaintiff_moved_to_VT }
  - Edit: defendant_VT
    button: |
      **Defendant vt**:
      ${ word(yesno(defendant_VT)) }
  - Edit: date_defendant_moved_to_VT
    button: |
      **Date defendant moved to vt**:
      ${ date_defendant_moved_to_VT }
  - Edit: marriage
    button: |
      **Marriage**:
      ${ word(yesno(marriage)) }
  - Edit: marriage_state
    button: |
      **Marriage state**:
      ${ marriage_state }
  - Edit: marriage_city
    button: |
      **Marriage city**:
      ${ marriage_city }
  - Edit: marriage_date
    button: |
      **Date of marriage**:
      ${ marriage_date }
  - Edit: civil_union
    button: |
      **Civil union**:
      ${ word(yesno(civil_union)) }
  - Edit: civil_union_city
    button: |
      **Civil union city**:
      ${ civil_union_city }
  - Edit: civil_union_state
    button: |
      **Civil union state**:
      ${ civil_union_state }
  - Edit: civil_union_date
    button: |
      **Date of civil union**:
      ${ civil_union_date }
  - Edit: six_month_separation
    button: |
      **Six month separation**:
      ${ word(yesno(six_month_separation)) }
  - Edit: separation_date
    button: |
      **Date of separation**:
      ${ separation_date }
  - Edit: legal_rights_responsibilities
    button: |
      **Legal parental rights and responsibilities**:
      
      % if legal_shared_jointly:
      - Shared jointly: **${yesno(legal_shared_jointly)}**
      % endif
      
      % if legal_myself:
      - Given solely to myself: **${yesno(legal_myself)}**
      % endif
      
      % if legal_defendant:
      - Given solely to the defendant: **${yesno(legal_defendant)}**
      % endif
  
  - Edit: physical_rights_responsibilities
    button: |
      **Physical parental rights and responsibilities**:
      
      % if physical_shared_jointly:
      - Shared jointly: **${yesno(physical_shared_jointly)}**
      % endif
      
      % if legal_myself:
      - Given solely to myself: **${yesno(physical_myself)}**
      % endif
      
      % if legal_defendant:
      - Given solely to the defendant: **${yesno(physical_defendant)}**
      % endif
  
  - Edit: contact_for
    button: |
      **Parent Child Contact**:
      
      % if contact_for_myself:
      - Contact for myself: **${yesno(contact_for_myself)}**
      % endif
      
      % if contact_for_defendant:
      - Contact for the defendant: **${ yesno(contact_for_defendant)}**
      % endif
      
  - Edit: child_medical_support
    button: |
      **Child support, medical support and/or maintenance supplement**:
      
      - ${yesno(child_medical_support)}
  - Edit: filing_financial_form
    button: |
      **Filing financial form**:
      ${ word(yesno(filing_financial_form)) }
  - Edit: plaintiff_des_assistance
    button: |
      **Plaintiff des assistance**:
      ${ word(yesno(plaintiff_des_assistance)) }
  - Edit: defendant_des_assistance
    button: |
      **Defendant des assistance**:
      ${ word(yesno(defendant_des_assistance)) }
  - Edit: defendant_military_service
    button: |
      **Defendant military service**:
      ${ word(yesno(defendant_military_service)) }
  - Edit: plaintiff_military_service
    button: |
      **Plaintiff military service**:
      ${ word(yesno(plaintiff_military_service)) }
  - Edit: divorce_decree
    button: |
      **Divorce decree**:
      ${ word(yesno(divorce_decree)) }
  - Edit: legal_separation_decree
    button: |
      **Legal separation decree**:
      ${ word(yesno(legal_separation_decree)) }
  - Edit: dissolution_decree
    button: |
      **Dissolution decree**:
      ${ word(yesno(dissolution_decree)) }
  - Edit: property_maintenance
    button: |
      **Property maintenance**:
      ${ word(yesno(property_maintenance)) }
  - Edit: spousal_maintenancee
    button: |
      **Spousal maintenancee**:
      ${ word(yesno(spousal_maintenancee)) }
  - Edit: court_costs
    button: |
      **Court costs**:
      ${ word(yesno(court_costs)) }
  - Edit: attorney_fees
    button: |
      **Attorney fees**:
      ${ word(yesno(attorney_fees)) }
  - Edit: name_change
    button: |
      **Name change**:
      ${ word(yesno(name_change)) }
  - Edit: plaintiff_former_name
    button: |
      **Plaintiff former name**:
      ${ plaintiff_former_name }
  - Edit: written_agreement_attached
    button: |
      **Written agreement attached**:
      ${ word(yesno(written_agreement_attached)) }
---
continue button field: users.revisit
question: |
  Edit users
subquestion: |
  ${ users.table }

  ${ users.add_action() }
---
table: users.table
rows: users
columns:
  - Name: |
      row_item.name.full() if defined("row_item.name.first") else ""
  - Birthdate: |
      row_item.birthdate if defined("row_item.birthdate") else ""
  - Address: |
      row_item.address.block() if defined("row_item.address.state") else ""
  - Email: |
      row_item.email if defined("row_item.email") else ""
edit:
  - name.first
  - birthdate
  - address.state
  - email
confirm: True
---
continue button field: other_parties.revisit
question: |
  Edit other_parties
subquestion: |
  ${ other_parties.table }

  ${ other_parties.add_action() }
---
table: other_parties.table
rows: other_parties
columns:
  - Name: |
      row_item.name.full() if defined("row_item.name.first") else ""
  - Birthdate: |
      row_item.birthdate if defined("row_item.birthdate") else ""
  - Address: |
      row_item.address.block() if defined("row_item.address.state") else ""
  - Email: |
      row_item.email if defined("row_item.email") else ""
edit:
  - name.first
  - birthdate
  - address.state
  - email
confirm: True
---
continue button field: earlier_actions.revisit
question: |
  Edit earlier actions
subquestion: |
  ${ earlier_actions.table }

  ${ earlier_actions.add_action() }
---
table: earlier_actions.table
rows: earlier_actions
columns:
  - Where filed: |
      row_item.where_filed if defined("row_item.where_filed") else ""
  - Who filed: |
      row_item.who_filed if defined("row_item.who_filed") else ""
  - Action type: |
      row_item.action_type if defined("row_item.action_type") else ""
  - Year filed: |
      row_item.year_filed if defined("row_item.year_filed") else ""
edit:
  - where_filed
  - who_filed
  - action_type
  - year_filed
confirm: True
---
continue button field: earlier_RFA.revisit
question: |
  Edit earlier RFA
subquestion: |
  ${ earlier_RFA.table }

  ${ earlier_RFA.add_action() }
---
table: earlier_RFA.table
rows: earlier_RFA
columns:
  - Where filed: |
      row_item.where_filed if defined("row_item.where_filed") else ""
  - Who filed: |
      row_item.who_filed if defined("row_item.who_filed") else ""
  - Action type: |
      row_item.action_type if defined("row_item.action_type") else ""
  - Year filed: |
      row_item.year_filed if defined("row_item.year_filed") else ""
edit:
  - where_filed
  - who_filed
  - action_type
  - year_filed
confirm: True
---
id: download divorce_no_kids
event: divorce_no_kids_download
question: |
  All done
subquestion: |
  Thank you ${users}. Your form is ready to download and deliver.
  
  View, download and send your form below. Click the "Edit answers" button to fix any mistakes.

  ${ action_button_html(url_action('review_divorce_no_kids'), label='Edit answers', color='info') }
  
  
  ${ al_user_bundle.download_list_html() }
  

  ${ al_user_bundle.send_button_html(show_editable_checkbox=False) }

progress: 100
---
# ALDocument objects specify the metadata for each template
objects:
  - divorce_no_kids_Post_interview_instructions: ALDocument.using(title="Instructions", filename="divorce_no_kids_next_steps.docx", enabled=True, has_addendum=False)
  - divorce_no_kids_attachment: ALDocument.using(title="Divorce (no kids)", filename="divorce_no_kids", has_addendum=True, )
  - divorce_with_kids_attachment: ALDocument.using(title="Divorce (with kids)", filename="divorce_with_kids", has_addendum=True)
---
attachment:
  variable name: divorce_no_kids_attachment.addendum
  docx template file: divorce_no_kids_addendum.docx
---
code: |
  divorce_no_kids_attachment.overflow_fields['earlier_actions'].overflow_trigger = 3
  divorce_no_kids_attachment.overflow_fields['earlier_actions'].label = "Other earlier actions"
  divorce_no_kids_attachment.overflow_fields['earlier_RFA'].overflow_trigger = 3
  divorce_no_kids_attachment.overflow_fields['earlier_RFA'].label = "Other RFA actions"
  divorce_no_kids_attachment.overflow_fields.gathered = True 
---
attachment: 
  variable name: divorce_with_kids_attachment.addendum
  docx template file: divorce_with_kids_addendum.docx
---
code: |
  divorce_with_kids_attachment.overflow_fields['children'].overflow_trigger = 3
  divorce_with_kids_attachment.overflow_fields['children'].label = "Other children"
  divorce_with_kids_attachment.overflow_fields.gathered = True 
---
# Bundles group the ALDocuments into separate downloads, such as for court and for the user
objects:
  - al_user_bundle: ALDocumentBundle.using(elements=[divorce_no_kids_Post_interview_instructions, divorce_with_kids_attachment,  divorce_no_kids_attachment], filename="divorce_with_kids", title="All forms to download for your records", enabled=True)
  
  - al_court_bundle: ALDocumentBundle.using(elements=[divorce_with_kids_attachment, divorce_no_kids_attachment],  filename="divorce_with_kids", title="All forms to deliver to court", enabled=True)
---
mandatory: True
code: |
  if have_school_age_children:
    divorce_with_kids_attachment.enabled = True
    divorce_no_kids_attachment.enabled = False
  else:
    divorce_with_kids_attachment.enabled = False
    divorce_no_kids_attachment.enabled = True
---
# Each attachment defines a key in an ALDocument. We use `i` as the placeholder here so the same template is 
# used for "preview" and "final" keys, and logic in the template checks the value of 
# `i` to show or hide the user's signature
attachment:
  name: Post-interview-Instructions
  filename: divorce_no_kids_next_steps
  docx template file: divorce_no_kids_next_steps.docx
  variable name: divorce_no_kids_Post_interview_instructions[i]
  skip undefined: True
  tagged pdf: True
---
attachment:
  name: divorce no kids
  filename: divorce_no_kids
  variable name: divorce_no_kids_attachment[i]
  skip undefined: True
  pdf template file: divorce_no_kids.pdf
  fields:
      - "docket_number": ${ docket_number }
      - "trial_court_county": ${ trial_court.address.county }
      - "users1_name": ${ users[0].name }
      - "other_parties1_name": ${ other_parties[0] }
      - "users1_name1": ${ users[0].name }
      - "users1_birthdate": ${ users[0].birthdate.format() }
      - "users1_address_line_one": ${ users[0].address.line_one() }
      - "users1_address_line_two": ${ users[0].address.line_two() }
      - "users1_address_mailing_line_one": ${ users[0].mailing_address.line_one() }
      - "users1_address_mailing_line_two": ${ users[0].mailing_address.line_two() }
      - "users1_email": ${ users[0].email }
      - "users1_evening_phone_number": ${ users[0].evening_phone_number }
      - "users1_daytime_phone_number": ${ users[0].daytime_phone_number }
      - "users1_attorneys_name": ${ users1_attorneys_name }
      - "users1_attorneys_phone_numer": ${ users1_attorneys_phone_numer }
      - "other_parties1_name1": ${ other_parties[0].name }
      - "other_parties1_birthdate": ${ other_parties[0].birthdate.format() }
      - "other_parties1_address_line_one": ${ other_parties[0].address.line_one() }
      - "other_parties1_address_line_two": ${ other_parties[0].address.line_two() }
      - "other_parties1__mailing_address_line_one": ${ other_parties[0].mailing_address.line_one() }
      - "other_parties1__mailing_address_line_two": ${ other_parties[0].mailing_address.line_two() }
      - "other_parties1_email": ${ other_parties[0].email }
      - "other_parties1_evening_phone_number": ${ other_parties[0].evening_phone_number }
      - "other_parties1_daytime_phone_number": ${ other_parties[0].daytime_phone_number }
      - "other_parties1_attorneys_name": ${ other_parties1_attorneys_name }
      - "other_parties1_attorneys_phone_number": ${ other_parties1_attorneys_phone_number }
      - "other_parties1_name2": ${ other_parties[0].name }
      - "users1_name2": ${ users[0].name }
      - "users1_name3": ${ users[0].name }
      - "divorce": ${ grant_for == "divorce" }
      - "civil_union_dissolution": ${ grant_for == "dissolution" }
      - "legal_separation": ${ grant_for == "legal_separation" }
      - "trial_court_county1": ${ trial_court.address.block() }
      - "signature_date": ${ signature_date }
      - "users1_signature": ${ users[0].signature_if_final(i) }
      - "users1_address_county": ${ users[0].address.county }
      - "users1_address_state": ${ users[0].address.state }
      - "plaintiff_VT": ${ plaintiff_VT }
      - "date_plaintiff_moved_to_VT": ${ date_plaintiff_moved_to_VT }
      - "other_parties1_address_county": ${ other_parties[0].address.county }
      - "other_parties1_address_state": ${ other_parties[0].address.state }
      - "defendant_VT": ${ defendant_VT }
      - "date_defendant_moved_to_VT": ${ date_defendant_moved_to_VT }
      - "marriage": ${ license_type == "marriage" }
      - "marriage_state": ${ marriage_state }
      - "marriage_city": ${ marriage_city }
      - "marriage_date": ${ marriage_date.format() }
      - "civil_union": ${ license_type == "civil_union" }
      - "civil_union_city": ${ civil_union_city }
      - "civil_union_state": ${ civil_union_state }
      - "civil_union_date": ${ civil_union_date.format() }
      - "grant_for": True 
      - "divorce1": ${ grant_for == "divorce" }
      - "legal_seeparation1": ${ grant_for == "legal_separation" }
      - "civil_union_dissolution1": ${ grant_for == "dissolution" }
      - "six_month_separation": ${ grounds["six_month_separation"] }
      - "separation_date": ${ separation_date.format() }
      - "other_ground": ${ grounds["other_ground"] }
      - "other_ground_explanation": ${ other_ground_explanation }
      - "filing_financial_form": ${ filing_financial_form }
      - "not_filing_financial_form": ${ not filing_financial_form }
      - "plaintiff_des_assistance": ${ plaintiff_des_assistance }
      - "defendant_des_assistance": ${ defendant_des_assistance }
      - "earlier_actions_no": ${ not earlier_actions_yes }
      - "earlier_actions_yes": ${ earlier_actions_yes }
      - "earlier_actions_where_filed1": ${ earlier_actions[0].where_filed }
      - "earlier_actions_filer1": ${ earlier_actions[0].who_filed }
      - "earlier_actions_type1": ${ earlier_actions[0].action_type }
      - "earlier_actions_year_filed1": ${ earlier_actions[0].year_filed }
      - "earlier_actions_where_filed2": ${ earlier_actions[1].where_filed }
      - "earlier_actions_filer2": ${ earlier_actions[1].who_filed }
      - "earlier_actions_type2": ${ earlier_actions[1].action_type }
      - "earlier_actions_year_filed2": ${ earlier_actions[1].year_filed }
      - "earlier_actions_where_filed3": ${ earlier_actions[2].where_filed }
      - "earlier_actions_filer3": ${ earlier_actions_filer[2].who_filed }
      - "earlier_actions_type3": ${ earlier_actions[2].action_type }
      - "earlier_actions_year_filed3": ${ earlier_actions[2].year_filed }
      - "earlier_RFA_no": ${ not earlier_RFA_yes }
      - "earlier_RFA_yes": ${ earlier_RFA_yes }
      - "earlier_RFA_where_filed1": ${ earlier_RFA[0].where_filed }
      - "earlier_RFA_filer1": ${ earlier_RFA[0].who_filed }
      - "earlier_RFA_actions_type1": ${ earlier_RFA[0].action_type }
      - "earlier_RFA_year_filed1": ${ earlier_RFA[0].year_filed }
      - "earlier_RFA_where_filed2": ${ earlier_RFA[1].where_filed }
      - "earlier_RFA_filer2": ${ earlier_RFA[1].who_filed }
      - "earlier_RFA_actions_type2": ${ earlier_RFA[1].action_type }
      - "earlier_RFA_year_filed2": ${ earlier_RFA[1].year_filed }
      - "earlier_RFA_where_filed3": ${ earlier_RFA[2].where_filed }
      - "earlier_RFA_filer3": ${ earlier_RFA[2].who_filed }
      - "earlier_RFA_actions_type3": ${ earlier_RFA[2].action_type }
      - "earlier_RFA_year_filed3": ${ earlier_RFA[2].year_filed }
      - "defendant_military_service": ${ defendant_military_service }
      - "defendant_no_military_service": ${ defendant_no_military_service }
      - "plaintiff_military_service": ${ plaintiff_military_service }
      - "plaintiff_no_military_service": ${ plaintiff_no_military_service }
      - "divorce_decree": ${ grant_for == "divorce" }
      - "legal_separation_decree": ${ grant_for == "legal_separation" }
      - "dissolution_decree": ${ grant_for == "dissolution" }
      - "property_maintenance": ${ property_maintenance }
      - "spousal_maintenancee": ${ spousal_maintenancee }
      - "court_costs": ${ court_costs }
      - "attorney_fees": ${ attorney_fees }
      - "name_change": ${ name_change }
      - "plaintiff_former_name": ${ plaintiff_former_name }
      - "written_agreement_attached": ${ written_agreement_attached }
      # It's a signature: test which file version this is; leave empty unless it's the final version)
      - "signature_date1": ${ signature_date }
---
attachment:
  name: divorce with kids
  filename: divorce_with_kids
  variable name: divorce_with_kids_attachment[i]
  skip undefined: True
  pdf template file: divorce_with_kids.pdf
  fields:
      - "docket_number": ${ docket_number }
      - "trial_court_county": ${ trial_court.address.county }
      - "users1_name": ${ users[0].name }
      - "other_parties1_name": ${ other_parties[0] }
      - "users1_name1": ${ users[0].name }
      - "users1_birthdate": ${ users[0].birthdate.format() }
      - "users1_address_line_one": ${ users[0].address.line_one() }
      - "users1_address_line_two": ${ users[0].address.line_two() }
      - "users1_address_mailing_line_one": ${ users[0].mailing_address.line_one() }
      - "users1_address_mailing_line_two": ${ users[0].mailing_address.line_two() }
      - "users1_email": ${ users[0].email }
      - "users1_evening_phone_number": ${ users[0].evening_phone_number }
      - "users1_daytime_phone_number": ${ users[0].daytime_phone_number }
      - "users1_attorneys_name": ${ users1_attorneys_name }
      - "users1_attorneys_phone_numer": ${ users1_attorneys_phone_numer }
      - "other_parties1_name1": ${ other_parties[0].name }
      - "other_parties1_birthdate": ${ other_parties[0].birthdate.format() }
      - "other_parties1_address_line_one": ${ other_parties[0].address.line_one() }
      - "other_parties1_address_line_two": ${ other_parties[0].address.line_two() }
      - "other_parties1__mailing_address_line_one": ${ other_parties[0].mailing_address.line_one() }
      - "other_parties1__mailing_address_line_two": ${ other_parties[0].mailing_address.line_two() }
      - "other_parties1_email": ${ other_parties[0].email }
      - "other_parties1_evening_phone_number": ${ other_parties[0].evening_phone_number }
      - "other_parties1_daytime_phone_number": ${ other_parties[0].daytime_phone_number }
      - "other_parties1_attorneys_name": ${ other_parties1_attorneys_name }
      - "other_parties1_attorneys_phone_number": ${ other_parties1_attorneys_phone_number }
      - "other_parties1_name2": ${ other_parties[0].name }
      - "users1_name2": ${ users[0].name }
      - "users1_name3": ${ users[0].name }
      - "divorce": ${ grant_for == "divorce" }
      - "civil_union_dissolution": ${ grant_for == "dissolution" }
      - "legal_separation": ${ grant_for == "legal_separation" }
      - "trial_court_county1": ${ trial_court.address.block() }
      - "signature_date": ${ signature_date }
      - "users1_signature": ${ users[0].signature_if_final(i) }
      - "users1_address_county": ${ users[0].address.county }
      - "users1_address_state": ${ users[0].address.state }
      - "plaintiff_VT": ${ plaintiff_VT }
      - "date_plaintiff_moved_to_VT": ${ date_plaintiff_moved_to_VT }
      - "other_parties1_address_county": ${ other_parties[0].address.county }
      - "other_parties1_address_state": ${ other_parties[0].address.state }
      - "defendant_VT": ${ defendant_VT }
      - "date_defendant_moved_to_VT": ${ date_defendant_moved_to_VT }
      - "marriage": ${ license_type == "marriage" }
      - "marriage_state": ${ marriage_state }
      - "marriage_city": ${ marriage_city }
      - "marriage_date": ${ marriage_date.format() }
      - "civil_union": ${ license_type == "civil_union" }
      - "civil_union_city": ${ civil_union_city }
      - "civil_union_state": ${ civil_union_state }
      - "civil_union_date": ${ civil_union_date.format() }
      - "grant_for": True 
      - "divorce1": ${ grant_for == "divorce" }
      - "legal_seeparation1": ${ grant_for == "legal_separation" }
      - "civil_union_dissolution1": ${ grant_for == "dissolution" }
      - "six_month_separation": ${ grounds["six_month_separation"] }
      - "separation_date": ${ separation_date.format() }
      - "other_ground": ${ grounds["other_ground"] }
      - "other_ground_explanation": ${ other_ground_explanation }
      
      - "child_name1": ${ children[0].name }
      - "child_birthdate1": ${ children[0].birthdate }
      - "child_name2": ${ children[1].name }
      - "child_birthdate2": ${ children[1].birthdate }
      - "child_name3": ${ children[2].name }
      - "child_birthdate3": ${ children[2].birthdate }
      - "child_name4": ${ children[3].name }
      - "child_birthdate4": ${ children[3].birthdate }
      - "child_name5": ${ children[4].name }
      - "child_birthdate5": ${ children[4].birthdate }
     
      - "child_address1": ${ children[0].address } 
      - "child_date1":    ${ children[0].date }
      - "child_housemate1": ${ children[0].housemate }
      - "child_address2": ${ children[1].address } 
      - "child_date2":    ${ children[1].date }
      - "child_housemate2": ${ children[1].housemate }
      - "child_address3": ${ children[2].address } 
      - "child_date3":    ${ children[2].date }
      - "child_housemate3": ${ children[2].housemate }
   
      - "participated_custody_child": ${ child_custody["participation"] }
      - "information_child": ${ child_custody["information"] }
      - "knowledge_custody_child": ${ child_custody["knowledge"] }
      - "legal_shared_jointly": ${legal_shared_jointly}
      - "legal_given_solely": ${legal_given_solely}
      - "legal_myself": ${legal_myself}
      - "legal_defendant": ${ legal_defendant }
      - "physical_shared_jointly": ${physical_shared_jointly}
      - "physical_given_solely": ${ physical_given_solely}
      - "physical_myself": ${physical_myself}
      - "physical_defendant": ${physical_defendant }
      - "parental_rights": ${ parental_rights }    
      - "contact_for_myself": ${contact_for_myself}
      - "contact_for_defendant": ${ contact_for_defendant }
      - "child_medical_support": ${ child_medical_support }
      - "filing_financial_form": ${ filing_financial_form }
      - "not_filing_financial_form": ${ not filing_financial_form }
      - "plaintiff_des_assistance": ${ plaintiff_des_assistance }
      - "defendant_des_assistance": ${ defendant_des_assistance }
      - "earlier_actions_no": ${ not earlier_actions_yes }
      - "earlier_actions_yes": ${ earlier_actions_yes }
      - "earlier_actions_where_filed1": ${ earlier_actions[0].where_filed }
      - "earlier_actions_filer1": ${ earlier_actions[0].who_filed }
      - "earlier_actions_type1": ${ earlier_actions[0].action_type }
      - "earlier_actions_year_filed1": ${ earlier_actions[0].year_filed }
      - "earlier_actions_where_filed2": ${ earlier_actions[1].where_filed }
      - "earlier_actions_filer2": ${ earlier_actions[1].who_filed }
      - "earlier_actions_type2": ${ earlier_actions[1].action_type }
      - "earlier_actions_year_filed2": ${ earlier_actions[1].year_filed }
      - "earlier_actions_where_filed3": ${ earlier_actions[2].where_filed }
      - "earlier_actions_filer3": ${ earlier_actions_filer[2].who_filed }
      - "earlier_actions_type3": ${ earlier_actions[2].action_type }
      - "earlier_actions_year_filed3": ${ earlier_actions[2].year_filed }
      - "earlier_RFA_no": ${ not earlier_RFA_yes }
      - "earlier_RFA_yes": ${ earlier_RFA_yes }
      - "earlier_RFA_where_filed1": ${ earlier_RFA[0].where_filed }
      - "earlier_RFA_filer1": ${ earlier_RFA[0].who_filed }
      - "earlier_RFA_actions_type1": ${ earlier_RFA[0].action_type }
      - "earlier_RFA_year_filed1": ${ earlier_RFA[0].year_filed }
      - "earlier_RFA_where_filed2": ${ earlier_RFA[1].where_filed }
      - "earlier_RFA_filer2": ${ earlier_RFA[1].who_filed }
      - "earlier_RFA_actions_type2": ${ earlier_RFA[1].action_type }
      - "earlier_RFA_year_filed2": ${ earlier_RFA[1].year_filed }
      - "earlier_RFA_where_filed3": ${ earlier_RFA[2].where_filed }
      - "earlier_RFA_filer3": ${ earlier_RFA[2].who_filed }
      - "earlier_RFA_actions_type3": ${ earlier_RFA[2].action_type }
      - "earlier_RFA_year_filed3": ${ earlier_RFA[2].year_filed }
      - "defendant_military_service": ${ defendant_military_service }
      - "defendant_no_military_service": ${ defendant_no_military_service }
      - "plaintiff_military_service": ${ plaintiff_military_service }
      - "plaintiff_no_military_service": ${ plaintiff_no_military_service }
      - "divorce_decree": ${ grant_for == "divorce" }
      - "legal_separation_decree": ${ grant_for == "legal_separation" }
      - "dissolution_decree": ${ grant_for == "dissolution" }
      - "property_maintenance": ${ property_maintenance }
      - "spousal_maintenancee": ${ spousal_maintenancee }
      - "court_costs": ${ court_costs }
      - "attorney_fees": ${ attorney_fees }
      - "name_change": ${ name_change }
      - "plaintiff_former_name": ${ plaintiff_former_name }
      - "written_agreement_attached": ${ written_agreement_attached }
      # It's a signature: test which file version this is; leave empty unless it's the final version)
      - "signature_date1": ${ signature_date }
